name: Release Helm Charts
run-name: 📦 Release Helm Charts to ghcr.io

on:
  push:
    branches:
      - main
    paths:
      - 'charts/**/Chart.yaml'
  workflow_dispatch:
    inputs:
      chart:
        description: 'Specific chart to release (leave empty for all)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  CHARTS_DIR: ./charts

jobs:
  release:
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.14.0'
      
      - name: Install yq
        run: |
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x /usr/local/bin/yq

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lint Charts
        run: |
          # Determine which charts to process
          if [ -n "${{ github.event.inputs.chart }}" ]; then
            CHARTS="${{ env.CHARTS_DIR }}/${{ github.event.inputs.chart }}"
          else
            CHARTS=$(find ${{ env.CHARTS_DIR }} -mindepth 1 -maxdepth 1 -type d)
          fi
          
          # Lint each chart
          for chart in $CHARTS; do
            if [ -f "$chart/Chart.yaml" ]; then
              chart_name=$(basename "$chart")
              echo "Linting chart: $chart_name"
              helm lint "$chart"
            fi
          done

      - name: Create kind config
        run: |
          cat <<EOF > /tmp/kind-config.yaml
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            kubeadmConfigPatches:
            - |
              kind: ClusterConfiguration
              apiServer:
                extraArgs:
                  max-requests-inflight: "1000"
                  max-mutating-requests-inflight: "500"
          EOF

      - name: Setup Kind cluster
        uses: helm/kind-action@v1.10.0
        with:
          cluster_name: kind
          version: v0.20.0
          config: /tmp/kind-config.yaml
          # Increase API server rate limits to prevent "client rate limiter Wait returned an error: context deadline exceeded"
          # This error occurs when Helm tries to create many Kubernetes resources simultaneously
          # Default limits (400/200) are too low for complex charts with many resources

      - name: Test Charts
        run: |
          # Determine which charts to process
          if [ -n "${{ github.event.inputs.chart }}" ]; then
            CHARTS="${{ env.CHARTS_DIR }}/${{ github.event.inputs.chart }}"
          else
            CHARTS=$(find ${{ env.CHARTS_DIR }} -mindepth 1 -maxdepth 1 -type d)
          fi
          
          # Test each chart
          for chart in $CHARTS; do
            if [ -f "$chart/Chart.yaml" ]; then
              chart_name=$(basename "$chart")
              
              # Check if test should be skipped based on Chart.yaml annotations
              skip_test=$(yq eval '.annotations."helm.sh/skip-test" // "false"' "$chart/Chart.yaml")
              if [[ "$skip_test" == "true" ]]; then
                skip_reason=$(yq eval '.annotations."helm.sh/skip-test-reason" // "No reason provided"' "$chart/Chart.yaml")
                echo "⏭️ Skipping test for $chart_name: $skip_reason"
                continue
              fi
              
              echo "Testing chart: $chart_name"
              
              # Dry run first
              helm install test-$chart_name "$chart" \
                --dry-run \
                --debug \
                --namespace test-$chart_name \
                --create-namespace
              
              # Actually install to test
              helm install test-$chart_name "$chart" \
                --namespace test-$chart_name \
                --create-namespace \
                --wait \
                --timeout 5m \
                --atomic
              
              # Run helm test if test resources exist
              helm test test-$chart_name -n test-$chart_name || echo "No test resources found for $chart_name"
              
              # Cleanup
              helm uninstall test-$chart_name -n test-$chart_name || true
              kubectl delete namespace test-$chart_name || true
            fi
          done

      - name: Package and Push Charts to OCI Registry
        run: |
          # Create temporary file for table content
          TEMP_TABLE="$(mktemp)"
          
          # Write table header to temp file
          echo "| Status | Chart | Chart Version | Location |" > "$TEMP_TABLE"
          echo "|--------|-------|---------------|----------|" >> "$TEMP_TABLE"
          
          # Determine which charts to process
          if [ -n "${{ github.event.inputs.chart }}" ]; then
            CHARTS="${{ env.CHARTS_DIR }}/${{ github.event.inputs.chart }}"
          else
            CHARTS=$(find ${{ env.CHARTS_DIR }} -mindepth 1 -maxdepth 1 -type d)
          fi
          
          # Initialize counters
          SUCCESS_COUNT=0
          SKIP_COUNT=0
          FAIL_COUNT=0
          
          # Package and push each chart to OCI registry
          for chart_dir in $CHARTS; do
            if [ -f "$chart_dir/Chart.yaml" ]; then
              chart_name=$(basename "$chart_dir")
              echo "Processing chart: $chart_name"
              
              # Get chart version
              chart_version=$(grep '^version:' "$chart_dir/Chart.yaml" | awk '{print $2}')
              
              # Package the chart
              helm package "$chart_dir" --destination .
              
              # Get the packaged file name
              CHART_FILE=$(ls ${chart_name}-*.tgz 2>/dev/null | head -n 1)
              
              if [ -n "$CHART_FILE" ]; then
                echo "Pushing $CHART_FILE to OCI registry"
                # Push to OCI registry
                if helm push "$CHART_FILE" oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts 2>&1 | tee push_output.log; then
                  echo "✅ Chart available at: oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts/$chart_name"
                  echo "| ✅ Released | $chart_name | $chart_version | \`oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts/$chart_name\` |" >> "$TEMP_TABLE"
                  SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
                elif grep -q "already exists" push_output.log; then
                  echo "⏭️ Chart $chart_name version $chart_version already exists, skipping"
                  echo "| ⏭️ Skipped | $chart_name | $chart_version | Already exists |" >> "$TEMP_TABLE"
                  SKIP_COUNT=$((SKIP_COUNT + 1))
                else
                  echo "❌ Failed to push $chart_name"
                  echo "| ❌ Failed | $chart_name | $chart_version | Failed to push |" >> "$TEMP_TABLE"
                  FAIL_COUNT=$((FAIL_COUNT + 1))
                fi
                
                # Clean up
                rm -f "$CHART_FILE" push_output.log
              else
                echo "Failed to package $chart_name"
                echo "| ❌ Failed | $chart_name | - | Failed to package |" >> "$TEMP_TABLE"
                FAIL_COUNT=$((FAIL_COUNT + 1))
              fi
            fi
          done
          
          # Write final summary to GITHUB_STEP_SUMMARY
          echo "## 📦 Helm Charts Release Summary" > $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add the table
          cat "$TEMP_TABLE" >> $GITHUB_STEP_SUMMARY
          
          # Add summary statistics
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Released: $SUCCESS_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- ⏭️ Skipped (already exists): $SKIP_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Failed: $FAIL_COUNT" >> $GITHUB_STEP_SUMMARY
          
          # Clean up temp file
          rm -f "$TEMP_TABLE"
          
          # Fail if any charts failed
          if [ $FAIL_COUNT -gt 0 ]; then
            exit 1
          fi
