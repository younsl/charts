name: Release Helm Charts
run-name: üì¶ Release Helm Charts to ghcr.io

on:
  push:
    branches:
      - main
    paths:
      - 'charts/**/Chart.yaml'
  workflow_dispatch:
    inputs:
      chart:
        description: 'Specific chart to release (leave empty for all)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  CHARTS_DIR: ./charts

jobs:
  test:
    name: Test Charts on K8s ${{ matrix.kubernetes-version }}
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        kubernetes-version: ['1.30.13', '1.31.9', '1.32.5']
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.18.0'
      
      - name: Install yq
        uses: mikefarah/yq@v4.47.1

      - name: Lint Charts
        run: |
          # Determine which charts to process
          if [ -n "${{ github.event.inputs.chart }}" ]; then
            CHARTS="${{ env.CHARTS_DIR }}/${{ github.event.inputs.chart }}"
          else
            CHARTS=$(find ${{ env.CHARTS_DIR }} -mindepth 1 -maxdepth 1 -type d)
          fi
          
          # Lint each chart
          for chart in $CHARTS; do
            if [ -f "$chart/Chart.yaml" ]; then
              chart_name=$(basename "$chart")
              echo "Linting chart: $chart_name"
              helm lint "$chart"
            fi
          done

      - name: Create kind config
        run: |
          cat << EOF > /tmp/kind-config.yaml
          ---
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
          - role: control-plane
            kubeadmConfigPatches:
            - |
              kind: ClusterConfiguration
              apiServer:
                extraArgs:
                  max-requests-inflight: "1000"
                  max-mutating-requests-inflight: "500"
          EOF

      - name: Setup Kind cluster
        uses: helm/kind-action@v1.12.0
        with:
          cluster_name: kind
          version: v0.20.0
          node_image: kindest/node:v${{ matrix.kubernetes-version }}
          config: /tmp/kind-config.yaml

      - name: Test Charts
        run: |
          # Determine which charts to process
          if [ -n "${{ github.event.inputs.chart }}" ]; then
            CHARTS="${{ env.CHARTS_DIR }}/${{ github.event.inputs.chart }}"
          else
            CHARTS=$(find ${{ env.CHARTS_DIR }} -mindepth 1 -maxdepth 1 -type d)
          fi
          
          # Test each chart
          for chart in $CHARTS; do
            if [ -f "$chart/Chart.yaml" ]; then
              chart_name=$(basename "$chart")
              
              # Check if test should be skipped based on Chart.yaml annotations
              skip_test=$(yq eval '.annotations."helm.sh/skip-test" // "false"' "$chart/Chart.yaml")
              if [[ "$skip_test" == "true" ]]; then
                skip_reason=$(yq eval '.annotations."helm.sh/skip-test-reason" // "No reason provided"' "$chart/Chart.yaml")
                echo "‚è≠Ô∏è Skipping test for $chart_name: $skip_reason"
                continue
              fi
              
              echo "Testing chart: $chart_name"
              
              # Dry run first
              helm install test-$chart_name "$chart" \
                --dry-run \
                --debug \
                --namespace test-$chart_name \
                --create-namespace
              
              # Actually install to test
              helm install test-$chart_name "$chart" \
                --namespace test-$chart_name \
                --create-namespace \
                --wait \
                --timeout 5m \
                --atomic
              
              # Run helm test if test resources exist
              helm test test-$chart_name -n test-$chart_name || echo "No test resources found for $chart_name"
              
              # Cleanup
              helm uninstall test-$chart_name -n test-$chart_name || true
              kubectl delete namespace test-$chart_name || true
            fi
          done

  release:
    name: Release Charts to OCI Registry
    needs: test
    runs-on: ubuntu-24.04
    if: success()
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.18.0'
      
      - name: Install yq
        uses: mikefarah/yq@v4.47.1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Package and Push Charts to OCI Registry
        run: |
          # Initialize summary arrays
          declare -a RELEASED=()
          declare -a SKIPPED=()
          declare -a FAILED=()
          
          # Determine which charts to process
          if [ -n "${{ github.event.inputs.chart }}" ]; then
            CHARTS="${{ env.CHARTS_DIR }}/${{ github.event.inputs.chart }}"
          else
            CHARTS=$(find ${{ env.CHARTS_DIR }} -mindepth 1 -maxdepth 1 -type d)
          fi
          
          # Process each chart
          for chart_dir in $CHARTS; do
            [ -f "$chart_dir/Chart.yaml" ] || continue
            
            chart_name=$(basename "$chart_dir")
            chart_version=$(yq eval '.version' "$chart_dir/Chart.yaml")
            
            echo "üì¶ Processing $chart_name:$chart_version"
            
            # Check if version already exists in OCI registry
            OCI_URL="oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts/$chart_name"
            echo "üîç Checking if $chart_name:$chart_version already exists..."
            
            if helm pull "$OCI_URL" --version "$chart_version" --destination /tmp/check 2>/dev/null; then
              SKIPPED+=("$chart_name|$chart_version|Version already exists in registry")
              echo "‚è≠Ô∏è Skipped $chart_name:$chart_version (version already exists in registry)"
              rm -rf /tmp/check
              continue
            fi
            rm -rf /tmp/check 2>/dev/null || true
            
            # Package the chart
            if ! helm package "$chart_dir" --destination /tmp 2>/dev/null; then
              FAILED+=("$chart_name|-|Failed to package")
              continue
            fi
            
            # Push to OCI registry
            OUTPUT=$(helm push "/tmp/${chart_name}-${chart_version}.tgz" \
              oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts 2>&1)
            
            if [ $? -eq 0 ]; then
              RELEASED+=("$chart_name|$chart_version|oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts/$chart_name")
              echo "‚úÖ Released $chart_name:$chart_version"
            else
              FAILED+=("$chart_name|$chart_version|Push failed: $OUTPUT")
              echo "‚ùå Failed $chart_name:$chart_version: $OUTPUT"
            fi
            
            # Cleanup
            rm -f "/tmp/${chart_name}-${chart_version}.tgz"
          done
          
          # Generate GitHub Step Summary
          {
            echo "## üì¶ Helm Charts Release Summary"
            echo ""
            echo "| Status | Chart | Version | Details |"
            echo "|--------|-------|---------|---------|"
            
            for item in "${RELEASED[@]}"; do
              IFS='|' read -r name version location <<< "$item"
              echo "| ‚úÖ Released | $name | $version | \`$location\` |"
            done
            
            for item in "${SKIPPED[@]}"; do
              IFS='|' read -r name version reason <<< "$item"
              echo "| ‚è≠Ô∏è Skipped | $name | $version | $reason |"
            done
            
            for item in "${FAILED[@]}"; do
              IFS='|' read -r name version reason <<< "$item"
              echo "| ‚ùå Failed | $name | $version | $reason |"
            done
            
            echo ""
            echo "### Summary"
            echo "- ‚úÖ Released: ${#RELEASED[@]}"
            echo "- ‚è≠Ô∏è Skipped: ${#SKIPPED[@]}"
            echo "- ‚ùå Failed: ${#FAILED[@]}"
          } >> $GITHUB_STEP_SUMMARY
          
          # Exit with error if any charts failed
          [ ${#FAILED[@]} -eq 0 ] || exit 1
